/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.discordbot;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import sx.blah.discord.api.IDiscordClient;
import sx.blah.discord.handle.obj.IChannel;
import sx.blah.discord.handle.obj.IGuild;
import sx.blah.discord.handle.obj.IMessage;
import sx.blah.discord.util.DiscordException;
import sx.blah.discord.util.MessageList;
import sx.blah.discord.util.MissingPermissionsException;
import sx.blah.discord.util.RequestBuffer;

/**
 *
 * @author Evyatar M
 */
public class botFrame extends javax.swing.JFrame {

    private static IDiscordClient client;
    // private static Map<String, Map<String, java.awt.TextArea>> guilds;
    private static Map<String, java.awt.TextArea> channelsText;
    private static String[][] channelsIDArray;
    private static javax.swing.JTabbedPane[] channelTabs;
    private static Logger logger = Logger.getLogger("Frame Logger");
    private boolean initiatedTabs = false;
    private Map<String, IMessage> lastMessages;

    /**
     * Creates new form botFrame
     */
    public botFrame(IDiscordClient client) {
        this.client = client;
        initComponents();
        this.guildsPane.removeAll();
        lastMessages = new HashMap<String, IMessage>();
        logger.setLevel(Level.ALL);

    }

    public void reloadMessages() {
        for (String chID : lastMessages.keySet()) {
            MessageList msgList = client.getChannelByID(chID).getMessages();
            IMessage lastMsg = lastMessages.get(chID);
            if (msgList.getEarliestMessage().getCreationDate().isAfter(lastMsg.getCreationDate())) {
                for (IMessage msg : msgList) {
                    addMessage(chID, msg);
                }
            } else {
                for (int i = 0; i < msgList.size(); i++) {
                    if (msgList.get(i).getCreationDate().isEqual(lastMsg.getCreationDate())) {
                        i += 1; //stop loop
                        for (; i < msgList.size(); i++) {
                            addMessage(chID, msgList.get(i));
                        }
                        assert i == msgList.size();
                    }
                }
            }

        }
    }

    public void loadStartMessages() {
        for (String[] guild : channelsIDArray) {
            for (String channelID : guild) {
                MessageList messageList = client.getChannelByID(channelID).getMessages();
                for (int i = 0; i < messageList.size(); i++) {
                    addMessage(channelID, messageList.get(i));
                }
            }
        }
    }

    public void loadMessages(IChannel ch){
        MessageList messageList = ch.getMessages();
                for (int i = 0; i < messageList.size(); i++) {
                    addMessage(ch.getID(), messageList.get(i));
                }
    }

    public void initiateTabs() {
        int i = 0;
        
        channelsIDArray = new String[client.getGuilds().size()][];
        channelTabs = new javax.swing.JTabbedPane[client.getGuilds().size()];
        channelsText = new HashMap<String, java.awt.TextArea>();
         for (IGuild guild : client.getGuilds()) {
            channelsIDArray[i] = new String[guild.getChannels().size()];
            javax.swing.JTabbedPane newGuildTab = new javax.swing.JTabbedPane();
            guildsPane.add(guild.getName(), newGuildTab);
            channelTabs[i] = newGuildTab;
            int j = 0;
            for (IChannel ch : guild.getChannels()) {
                channelsIDArray[i][j] = ch.getID();
                java.awt.TextArea channelTextArea = new java.awt.TextArea();
                channelsText.put(ch.getID(), channelTextArea);
                newGuildTab.add(ch.getName(), channelTextArea);
                j++;
            }
            i++;

        } 
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                loadStartMessages();
            }

        });
        
        initiatedTabs = true;
        logoutButton.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newMessageTextField = new javax.swing.JTextField();
        logoutButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        guildsPane = new javax.swing.JTabbedPane();
        channelsPane = new javax.swing.JTabbedPane();
        textArea1 = new java.awt.TextArea();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        newMessageTextField.setToolTipText("");
        newMessageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMessageTextFieldActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.setEnabled(false);
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.setEnabled(false);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        channelsPane.addTab("tab1", textArea1);

        guildsPane.addTab("tab1", channelsPane);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guildsPane)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 338, Short.MAX_VALUE)
                        .addComponent(logoutButton)
                        .addGap(40, 40, 40)
                        .addComponent(loginButton)
                        .addGap(463, 463, 463))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(newMessageTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logoutButton)
                    .addComponent(loginButton))
                .addGap(10, 10, 10)
                .addComponent(guildsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        try {
            client.logout();
            logoutButton.setEnabled(false);
            loginButton.setEnabled(true);
            Dbot.setLoggedOut(true);
        } catch (Exception e) {
            // <editor-fold defaultstate="collapsed" desc="Stack trace frame">
            StringBuilder sb = new StringBuilder(e.toString());
            for (StackTraceElement ste : e.getStackTrace()) {
                sb.append("\n\tat ");
                sb.append(ste);
            }
            String trace = sb.toString();
            logger.log(Level.WARNING, "botFrame Exception - logoutButton \n " + trace);
            // </editor-fold>
        }

    }//GEN-LAST:event_logoutButtonActionPerformed


    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try {
            int indexOfSelectedGuild = guildsPane.getSelectedIndex();
            int indexOfSelectedCh = channelTabs[indexOfSelectedGuild].getSelectedIndex();
            String message = this.newMessageTextField.getText();
            String tempChID = channelsIDArray[indexOfSelectedGuild][indexOfSelectedCh];
            sendMessage(client.getChannelByID(tempChID), message);
            channelsText.get(tempChID).append(client.getOurUser().getDisplayName(client.getChannelByID(tempChID).getGuild()) + ": " + message + "\n");
            newMessageTextField.setText("");
        } catch (Exception e) {
            // <editor-fold defaultstate="collapsed" desc="Stack trace frame">
            StringBuilder sb = new StringBuilder(e.toString());
            for (StackTraceElement ste : e.getStackTrace()) {
                sb.append("\n\tat ");
                sb.append(ste);
            }
            String trace = sb.toString();
            logger.log(Level.WARNING, "botFrame Exception - sendAction \n " + trace);
            // </editor-fold>
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void newMessageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMessageTextFieldActionPerformed
        this.sendButtonActionPerformed(evt);
    }//GEN-LAST:event_newMessageTextFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        try {
            client.login();
            loginButton.setEnabled(false);
            logoutButton.setEnabled(true);
            Dbot.setLoggedOut(false);

        } catch (Exception e) {
            // <editor-fold defaultstate="collapsed" desc="Stack trace frame">
            StringBuilder sb = new StringBuilder(e.toString());
            for (StackTraceElement ste : e.getStackTrace()) {
                sb.append("\n\tat ");
                sb.append(ste);
            }
            String trace = sb.toString();
            logger.log(Level.WARNING, "botFrame Exception - loginButton \n " + trace);
            // </editor-fold>
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public void addMessage(String channelID, IMessage msg) {
        if (initiatedTabs) {
            channelsText.get(channelID).append(msg.getAuthor().getName() + ": " + msg.getContent() + "\n");
            lastMessages.put(channelID, msg);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane channelsPane;
    private javax.swing.JTabbedPane guildsPane;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTextField newMessageTextField;
    private javax.swing.JButton sendButton;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

    private void sendMessage(IChannel channel, String message) {
        RequestBuffer.request(() -> {
            try {
                IMessage msg = channel.sendMessage(message);
                addMessage(channel.getID(), msg);
            } catch (DiscordException e) { //| MissingPermissionsException e) {
                // <editor-fold defaultstate="collapsed" desc="Stack trace frame">
                StringBuilder sb = new StringBuilder(e.toString());
                for (StackTraceElement ste : e.getStackTrace()) {
                    sb.append("\n\tat ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                logger.log(Level.WARNING, "botFrame Exception - sendMessage.. Trying again\n " + trace);
                // </editor-fold>
                sendMessage(channel, message);
            } catch (MissingPermissionsException e) {
                // <editor-fold defaultstate="collapsed" desc="Stack trace frame">
                StringBuilder sb = new StringBuilder(e.toString());
                for (StackTraceElement ste : e.getStackTrace()) {
                    sb.append("\n\tat ");
                    sb.append(ste);
                }
                String trace = sb.toString();
                logger.log(Level.WARNING, "botFrame Exception - sendMessage \n " + trace);
                // </editor-fold>
            }
            return null;
        });

    }

}
